<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Octopus Energy</title>
    <description>Octopus Energy: supplying greener, affordable energy to the UK.
</description>
    <link>http://tech.octopus.energy/</link>
    <atom:link href="http://tech.octopus.energy/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 01 Mar 2019 10:31:38 +0000</pubDate>
    <lastBuildDate>Fri, 01 Mar 2019 10:31:38 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Our in-house coding conventions</title>
        <description>&lt;p&gt;We’ve published our in-house coding conventions in a public Github repo: &lt;a href=&quot;https://github.com/octoenergy/conventions&quot;&gt;github.com/octoenergy/conventions&lt;/a&gt;. It contains
guidelines for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python and Django code&lt;/li&gt;
  &lt;li&gt;CSS and SASS&lt;/li&gt;
  &lt;li&gt;HTML templates for the web and email&lt;/li&gt;
  &lt;li&gt;Git usage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s lots of useful information there: hard-won lessons from building a large
platform and the challenges that come with it.&lt;/p&gt;

&lt;p&gt;The document is constantly evolving. We continually reflect on our codebase and
use the document to codify new conventions and patterns. &lt;/p&gt;

&lt;p&gt;It’s useful as a reference in code-review comments; to provide the
detailed reasoning behind design decisions.&lt;/p&gt;

&lt;p&gt;We keep it in a public repo as we believe the conventions will be useful to
other teams building large Django applications.  Hopefully it will prove a
valuable resource.&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
        <link>http://tech.octopus.energy/news/2019/02/28/conventions-repo.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/news/2019/02/28/conventions-repo.html</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Recommended Django project structure</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://twitter.com/jamesbeith?lang=en&quot;&gt;James Beith&lt;/a&gt;, a member of our tech team, has written up an excellent post on &lt;a href=&quot;https://www.jamesbeith.co.uk/blog/how-to-structure-django-projects/&quot;&gt;how
to structure a Django
project&lt;/a&gt;, based on how we structure our Django projects
here at Octopus Energy.&lt;/p&gt;

&lt;p&gt;We’ve found that Django’s emphasis on re-usable apps can lead to structural
problems and a three-layer approach, where data and application logic are
clearly separated works better for large Django projects.&lt;/p&gt;

&lt;p&gt;There’s some discussion of this approach over on &lt;a href=&quot;https://news.ycombinator.com/item?id=17408958&quot;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
        <link>http://tech.octopus.energy/news/2018/06/28/django-project-structure.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/news/2018/06/28/django-project-structure.html</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Using a custom Sentry client</title>
        <description>&lt;p&gt;We use
&lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;Sentry&lt;/a&gt; to monitor errors within our Django applications. It’s an
excellent tool: you should use it. &lt;/p&gt;

&lt;p&gt;Regrettable however, we sometimes need to SSH into a server within our platform
and use Django’s shell to explore or adjust data. However, by default,
exceptions from these sessions are captured up Sentry and appear in the
dashboard. &lt;/p&gt;

&lt;p&gt;This isn’t helpful as such errors are not application problems &lt;em&gt;per se&lt;/em&gt; and
just add noise.  We want Sentry to ignore these exceptions.&lt;/p&gt;

&lt;p&gt;To prevent these errors being captured, the solution is to use a custom Sentry
client class with an overridden &lt;code&gt;should_capture&lt;/code&gt; method that ignores errors
triggered from a shell session.&lt;/p&gt;

&lt;p&gt;Here’s an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;raven.contrib.django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DjangoClient&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomSentryClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DjangoClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Check if this exception was triggered from a shell session. We don&amp;#39;t care about these&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# as they are normally human typos and of no further interest.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;shell_plus&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dbshell&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should_capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exc_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Plumb this in by adding a &lt;code&gt;SENTRY_CLIENT&lt;/code&gt; setting specifying the module path to
this class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# settings.py&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SENTRY_CLIENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;path.to.module.CustomSentryClient&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Problem solved.&lt;/p&gt;

</description>
        <pubDate>Fri, 13 Oct 2017 00:00:00 +0100</pubDate>
        <link>http://tech.octopus.energy/news/2017/10/13/custom-sentry-client.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/news/2017/10/13/custom-sentry-client.html</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Improving accessibility at Octopus Energy</title>
        <description>&lt;p&gt;The Home Office recently published guidance on how companies can use web design
and development to make sites accessible to everyone. They outlined rules to
help those with low vision, dyslexia, users on the autism spectrum, or those
using screen readers.&lt;/p&gt;

&lt;p&gt;We took this as the perfect opportunity to audit our website and see if we were
providing all of our visitors and customers with an easy and enjoyable
experience. The results of this audit were good, but not perfect, so we got to
work. Here are some of the checks we ran and a few areas in which we improved –
hopefully our progress will encourage others to do the same.&lt;/p&gt;

&lt;h2 id=&quot;alt-tags&quot;&gt;Alt tags&lt;/h2&gt;
&lt;p&gt;Ever questioned the importance of alt tags? Have them read out to you at speed
by a screen reader and you’ll be persuaded. The only real rule here is to ensure
that the text used actually describes what is in the image, rather than the
image’s purpose within the page. For example, the alt text for our “About Us”
page banner should be “an image of the Octopus Energy operations team,” rather
than “About us banner image.”&lt;/p&gt;

&lt;h2 id=&quot;heading-structure&quot;&gt;Heading structure&lt;/h2&gt;
&lt;p&gt;All headers in a web page should have a hierarchy, beginning with the most
important header to the least, and the markup of the page should reflect that.
In HTML, the most important title is an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag, and can go all the way down to
an &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;. You can use as many or as few of these as you like, but they must start
with an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and must always be used in order. The reason for this is that heading
tags denote importance to screen readers, and out of order headers may well
confuse a user. Proper heading structure also benefits the SEO of your page.&lt;/p&gt;

&lt;p&gt;You can check this using the Headings Map chrome extension. When run on a page,
this generates a tree based on the headings on your page, and highlights any
that are out of place or have been skipped entirely&lt;/p&gt;

&lt;p&gt;Note: To dispel a common myth, having multiple &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags in a page is no
longer a huge taboo. Google themselves state that you can have &lt;a href=&quot;https://www.youtube.com/watch?v=GIn5qJKU8VM&quot;&gt;up to three &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;’s
in a page&lt;/a&gt; that are used to garner
its content. The real importance is that those &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;’s remain on the same
hierarchical level as each other, and that as you make your way down the heading
ladder, no rung is skipped or added out of place.&lt;/p&gt;

&lt;h2 id=&quot;html5-outline&quot;&gt;HTML5 outline&lt;/h2&gt;
&lt;p&gt;That same extension is also terrific for assessing your compliance with HTML5
outline. This is the structure of a document, generated by the document’s
headings, form titles, table titles, and any other appropriate landmarks to &lt;a href=&quot;http://www.w3.org/TR/2002/REC-UAAG10-20021217/guidelines#tech-provide-outline-view&quot;&gt;map
out the document&lt;/a&gt;.
The user agent can apply this information to generate a table of contents, for
example, which could then be used by assistive technology to help the user
navigate.&lt;/p&gt;

&lt;p&gt;The key here is to make sure that each section has an appropriate header, and
that no parts of the page are “marooned” from a screen reader’s perspective
without context. Although this feature has been in the W3C spec &lt;a href=&quot;http://www.w3.org/TR/2008/WD-html5-20080122/#outlines&quot;&gt;for years – (2008)&lt;/a&gt;, it has only
recently gone beyond a theoretical stage. However, it stands to make the whole
page – not just it’s headers – more digestible for screen readers.&lt;/p&gt;

&lt;h2 id=&quot;off-screen-headers&quot;&gt;Off-screen headers&lt;/h2&gt;
&lt;p&gt;Whilst auditing the site, I found that certain sections lacked context. Most
notable was the navigation, which sat at the top of every page without a title.
Very few menus call for a title, so a small utility class was used to add these
headers but place them off the screen visually so they didn’t impact design.&lt;/p&gt;

&lt;h2 id=&quot;use-correct-html5-tags&quot;&gt;Use correct HTML5 tags&lt;/h2&gt;
&lt;p&gt;There’s nothing new I could write here as it’s such standard practice now. And
you’re doing it perfectly… right?!&lt;/p&gt;

&lt;h2 id=&quot;tab-index&quot;&gt;Tab index&lt;/h2&gt;
&lt;p&gt;This was probably the most important addition to the site throughout the audit.
Many users prefer to use just a keyboard, or can only use a keyboard, to
navigate a website. For pages such as articles this is relatively easy as all
the content is there, but for core flows on our site, such as getting a quote,
breaking it down and signing up, this content exists over multiple pages, within
modals and dropdowns, and requires user input.&lt;/p&gt;

&lt;p&gt;Most browsers are very good at allowing keyboard interaction with elements such
as buttons, links, and form inputs. However, sometimes design and UX dictates
custom components that stray from this, and they need to be just as accessible.
Tab index allows you to define a sequence that users follow when they use the
Tab key to navigate through a page. With this, you can ensure that users have
access to all the information on a page in an order that is both clear and
logical.&lt;/p&gt;

&lt;h2 id=&quot;dom-interactions&quot;&gt;DOM interactions&lt;/h2&gt;
&lt;p&gt;Tab index helped a keyboard user focus a particular element, but this didn’t
guarantee that they could actually interact with it. For components created with
divs and spans, a browser wouldn’t be able to recognise the role they were
designed to play without appropriate markup.&lt;/p&gt;

&lt;p&gt;Therefore, we set up listeners that checked for the following when a key is pressed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Was that key the spacebar or the enter button (common keys used to interact with buttons, forms, links, etc.)?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is there an element currently focused (either naturally by the browser or through tab index)?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If these both return true, a click is triggered on the element. An additional
check is made for elements that use the “aria-role=‘button’” attribute, as those
are typically only interacted with using the space bar.&lt;/p&gt;

&lt;h2 id=&quot;focus-styles&quot;&gt;Focus styles&lt;/h2&gt;
&lt;p&gt;Once we’d overcome the tab indexing issues, we needed to ensure it was obvious
to users which part of the site they were focused on. There are default browser
styles for focused elements, but it’s fairly common for developers to apply
blanket rules to these selectors due to the less than preferable blue line it
shows when a user clicks them.&lt;/p&gt;

&lt;p&gt;As they’re seen when a user clicks the element as well as when it’s focused via
keyboard, focus styles need to tread the line between being obvious and not
negatively impacting a page’s design. Nice alternatives to the typical outline
rule can be box-shadows or changes in background and border colour.&lt;/p&gt;

&lt;h2 id=&quot;contrast-levels&quot;&gt;Contrast levels&lt;/h2&gt;
&lt;p&gt;This is a tricky issue to spot sometimes, but easy to test. W3C state that the
contrast level between foreground and background colours should be at least 7:1
for regular text to be &lt;a href=&quot;https://www.w3.org/TR/WCAG20/#visual-audio-contrast7&quot;&gt;AAA compliant&lt;/a&gt;. This is
especially important for users with low vision, who may have trouble focusing on
text coloured similarly to the background.&lt;/p&gt;

&lt;p&gt;As it would be incredibly difficult assessing contrast with the human eye, there
are quite a few helpful online tools. The &lt;a href=&quot;http://webaim.org/resources/contrastchecker/&quot;&gt;webaim contrast
tool&lt;/a&gt; is what we used (you submit
the two hex codes manually), but there are tools that can assess a whole page,
such as &lt;a href=&quot;http://wave.webaim.org/&quot;&gt;Webaim Wave&lt;/a&gt;. The Google Accessibility
developer tools extension also raises any issues with contrast when you audit a
page.&lt;/p&gt;

&lt;h2 id=&quot;semantics&quot;&gt;Semantics&lt;/h2&gt;
&lt;p&gt;This isn’t solely focused on accessibility, since all aspects of page markup are
intrinsically linked to a good page. You would struggle to have a good heading
structure or HTML outline without having  semantic markup. Also, passing
validation gives you that warm, fuzzy feeling inside. We used the Validity
Chrome extension to test our pages on the fly.&lt;/p&gt;

&lt;h2 id=&quot;and-many-more&quot;&gt;And many more…&lt;/h2&gt;

&lt;h3 id=&quot;some-minimal-effort-quick-wins-that-can-really-help-customers&quot;&gt;Some minimal effort “quick wins” that can really help customers:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Raising the base font size to help those with low vision. The gov.uk site has
19px as the lowest font size, ensuring everyone can easily read their content
(we use 18px).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ensuring that action buttons state what you’re about to do, instead of being
vague. For example, a sign up button should say “Sign up” and not “Click
here”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When using icons or colour to convey meaning or action, always support it with
text. Colour only impacts those with low vision or colourblindness, and the
use of figures of speech, idioms, or visuals that could be misinterpreted can
affect those on the autistic spectrum.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t have large text in paragraph tags masquerading as headers. The visual
meaning attributed to it will never be conveyed via a screen reader.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;
&lt;p&gt;Finding the problems are sometimes just as hard as fixing them. These were the
best tools we found over the course of the audit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/accessibility-developer-t/fpkknkljclfencbdbgkenhalefipecmb&quot;&gt;Google accessibility developer tools&lt;/a&gt; (ran in the ‘audit’ panel of developer tools)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/headingsmap/flbjommegcjonpdmenkdiocclhjacmbi&quot;&gt;Headings map extension (Chrome)&lt;/a&gt; – for HTML5 outline and heading structure&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.apple.com/uk/accessibility/osx/voiceover/&quot;&gt;Voice over for Mac&lt;/a&gt; – screen reader&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/validity/bbicmjjbohdfglopkidebfccilipgeif&quot;&gt;Validity extension&lt;/a&gt; – for inline W3C validation&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;inspiration&quot;&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;The Home Office’s excellent visual posters of the &lt;a href=&quot;https://github.com/UKHomeOffice/posters/tree/master/accessibility&quot;&gt;Do’s and Don’ts of Designing
with Accessibility in
Mind&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;users-can-now&quot;&gt;Users can now:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Get a quote, interact with it, and sign up using just the keyboard or a screen reader.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Perform regular tasks within the members area such as submit a meter reading,
view their bills or edit their details using just the keyboard or a screen
reader.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use screen readers with more ease, as all pages follow a logical informational
and heading structure, with descriptive alt tags for images.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Easily read all content on the website, as it has a passing AAA contrast rating.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clearly understand the purpose of links and buttons, with descriptive action
text and no instances where only imagery is used to convey meaning.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am proud of the progress we’ve made on the site’s accessibility, but no site
we’ve seen is perfect all the time. We’ll diligently maintain the new standards
we’ve set for ourselves, with the goal that nobody will be excluded based on the
way they interact with our site.&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Jul 2016 00:00:00 +0100</pubDate>
        <link>http://tech.octopus.energy/news/2016/07/22/improving-accessibility-at-octopus-energy.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/news/2016/07/22/improving-accessibility-at-octopus-energy.html</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Django, ELB health checks and continuous delivery</title>
        <description>&lt;p&gt;A robust means of deploying web applications with Amazon Web
Services is to use an &lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/&quot;&gt;Elastic Load Balancer&lt;/a&gt;
(ELB) to balance requests between an “Auto Scaling Group” (ASG) of EC2 instances. As
well as horizontally scaling, this set-up allows automated canary (aka
blue-green) deployments, where new application versions are deployed as a new
ASG which replaces the existing EC2 instances; a so-called “immutable
infrastructure” approach.&lt;/p&gt;

&lt;p&gt;Such a procedure relies on ELB “health check” requests to test that the
new EC2 instances are ready to take production traffic (and the old instances
can be terminated). For canary deployments, it’s important that the health check
is accurate: false positives lead to broken applications being brought into
production, causing errors, downtime, and other sadness.&lt;/p&gt;

&lt;p&gt;At &lt;a href=&quot;https://octopus.energy&quot;&gt;Octopus Energy&lt;/a&gt;, we deploy Django applications in
this way as part of a continuous delivery pipeline coordinated by Hashicorp’s
excellent &lt;a href=&quot;https://www.hashicorp.com/atlas.html&quot;&gt;Atlas&lt;/a&gt; service:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;CircleCI, our continuous integration service, packages up the application
when the tests pass on master and uploads the tarball to Atlas.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Atlas then employs Packer with a set of uploaded configuration (e.g. Puppet
manifests and modules) to create a new Amazon Machine Image (AMI).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Atlas then deploys this AMI into production using Terraform. Terraform brings
the new AMI into production as described above, creating a new ASG and launch
configuration that uses the new AMI.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Evolving this process over the last few months has highlighted the importance of
getting the health check right. Below are some tips. An example Django application
run with uWSGI and NGINX is used but most of the advice
translates to other frameworks and HTTP servers.&lt;/p&gt;

&lt;p&gt;While this article is nominally about health checks, the TLDR is that you can
build great things with Hashicorp’s products. Specifically, if you use AWS and haven’t
checked out Terraform before - do that today.&lt;/p&gt;

&lt;h1 id=&quot;a-health-check-django-view&quot;&gt;A health-check Django view&lt;/h1&gt;

&lt;p&gt;Our ELB health check is configured in Terraform as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;resource &amp;quot;aws_elb&amp;quot; &amp;quot;web&amp;quot; {

    ...

    health_check {
        # Where to make health check requests to
        target = &amp;quot;HTTP:80/health&amp;quot;

        # How often to make health check requests (in seconds)
        interval = 15

        # Number of checks before instance is declared healthy
        healthy_threshold = 2

        # Number of checks before instance is declared unhealthy
        unhealthy_threshold = 10

        # Number of seconds to wait for a healthcheck response
        timeout = 5
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In other words: an EC2 instance is considered healthy when two HTTP requests to &lt;code&gt;/health&lt;/code&gt;
return a 200 status (within five seconds).&lt;/p&gt;

&lt;p&gt;Let’s start simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# urls.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&amp;#39;^health&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It would have been easier to use NGINX to respond to the health-check request
directly without troubling uWSGI.
But we get considerably more value by going a layer deeper and getting the
Django application to respond.  Several classes of problem
are prevented by doing this since health checks fail when uWSGI can’t
start the Python application.&lt;/p&gt;

&lt;h2 id=&quot;unhealthy-instances-cant-run-the-python-application&quot;&gt;Unhealthy instances can’t run the Python application&lt;/h2&gt;

&lt;p&gt;As per the &lt;a href=&quot;http://12factor.net/&quot;&gt;12-factor app guidelines&lt;/a&gt;, our EC2 instances are stateless and
read their configuration from environment variables. These are set by Upstart,
sourcing a configuration file managed by consul-template:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# /etc/init/uwsgi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Ensure the uWSGI process doesn&amp;#39;t start until&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the consul-template process has started.&lt;/span&gt;
start on started consul-template
stop on runlevel &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;06&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

respawn

&lt;span class=&quot;c&quot;&gt;# This is the file consul-template manages&lt;/span&gt;
env &lt;span class=&quot;nv&quot;&gt;ENV_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/etc/application/env-vars&amp;quot;&lt;/span&gt;
env &lt;span class=&quot;nv&quot;&gt;UWSGI_INI_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/etc/uwsgi.ini&amp;quot;&lt;/span&gt;
env &lt;span class=&quot;nv&quot;&gt;VENV_ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/opt/venv&amp;quot;&lt;/span&gt;

script
    &lt;span class=&quot;c&quot;&gt;# Set environment variables&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ENV_FILE&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Apply migrations. Piping the output to logger ensures it get&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# is included in /var/log/syslog and hence gets forwarded to Loggly.&lt;/span&gt;
    sudo -u www-data django-admin migrate --noinput --no-color &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; logger -t migrations

    &lt;span class=&quot;c&quot;&gt;# Start uWSGI&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VENV_ROOT&lt;/span&gt;/bin/uwsgi --ini &lt;span class=&quot;nv&quot;&gt;$UWSGI_INI_FILE&lt;/span&gt;
end script&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We ensure the Python application cannot start with missing/invalid configuration
using simple wrapper functions in &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# settings.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value_from_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Return a env variable, raising an exception if it is not defined&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;quot;No &amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39; env variable found. This needs to be set in Consul&amp;#39;s &amp;quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;quot;key-value store.&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Example config look-up&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SECRET_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_from_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If the &lt;code&gt;SECRET_KEY&lt;/code&gt; environmental variable isn’t defined in Consul, uWSGI won’t
be able to start the Python application and health checks will fail. This
practice ensures canary deployments fail if configuration is missing.&lt;/p&gt;

&lt;p&gt;Assuming uWSGI can start the Python application, let’s example the set-up that
allows Django to respond successfully to the health check.&lt;/p&gt;

&lt;h1 id=&quot;nginx&quot;&gt;NGINX&lt;/h1&gt;

&lt;p&gt;We terminate TLS on the ELB and proxy requests to port 80 of the EC2 instance.
For normal user requests, we use the &lt;code&gt;X_FORWARDED_PROTO&lt;/code&gt; header to ensure TLS is used.
However, we don’t want this for health-check requests so we use a separate &lt;code&gt;location&lt;/code&gt;
directive:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# /etc/nginx/sites-enabled/default&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# uWSGI is configured to use this socket&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;///&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uwsgi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;octopus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;charset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Allow healthchecks to be made from ELB without X_FORWARDED_PROTO header&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;health&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;access_log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;uwsgi_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uwsgi_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Ensure non-TLS requests are redirected&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http_x_forwarded_proto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rewrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_uri&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permanent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;uwsgi_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uwsgi_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we use a separate log file as we don’t want the health check requests being
included in the main access file which we forward as a JSON event stream
to Loggly (this is super-useful).&lt;/p&gt;

&lt;h1 id=&quot;allowed-hosts&quot;&gt;Allowed hosts&lt;/h1&gt;

&lt;p&gt;ELB health-check requests use the private IP address of the EC2 instance as the
host header so we need to ensure such requests are correctly handled by the Django
application.&lt;/p&gt;

&lt;p&gt;For NGINX, this isn’t a problem as we proxy to the Django application in the
catch-all virtualhost (the first one defined).&lt;/p&gt;

&lt;p&gt;For the Django application to respond correctly, the private IP address must be
in the &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; setting or Django will return a “400 Bad Request”
response. Since webservers are ephemeral, this setting needs to be set
dynamically, normally by calling the AWS internal metadata service during
start-up.  You can make such a request in the EC2 “user-data” and write the
value to a config file, or call the metadata service when &lt;code&gt;settings.py&lt;/code&gt; is
imported.  The former may look something like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# userdata.sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Writing EC2 metadata to files in /etc/aws/&amp;quot;&lt;/span&gt;
mkdir -p /etc/aws/
ec2metadata --local-ipv4 &amp;gt; /etc/aws/ipv4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# settings.py&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value_from_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Return a string value from a local file&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Read local IP address from file created by EC2 user-data script&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;AWS_LOCAL_IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value_from_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/etc/aws/ipv4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AWS_LOCAL_IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;octopus.energy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, the simple health-check view defined above will happily respond
to requests.  Let’s now extend the implementation of the health-check view.&lt;/p&gt;

&lt;h2 id=&quot;check-pages-render-correctly&quot;&gt;Check pages render correctly&lt;/h2&gt;

&lt;p&gt;You can use the Django test client to run a simple smoke test on your site. For
example, checking the homepage loads.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# check.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;httplib&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;health&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;page_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httplib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Make an internal (fake) HTTP request to check a page returns the expected&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    status code.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Error from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_status&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Log healthcheck errors to Loggly so we can debug failing deployments&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# where the new instances fail the healthcheck.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Response from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; was &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, not &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can use this helper in our view function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;httplib&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httplib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERVICE_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;check-migrations-have-applied-successfully&quot;&gt;Check migrations have applied successfully&lt;/h2&gt;

&lt;p&gt;As shown above, we attempt to apply migrations when Upstart starts the Django
application. Should any of these migrations fails, we don’t want to bring that
machine into production. Hence we check for unapplied migrations as part of the
health check:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# check.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db.migrations.loader&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MigrationLoader&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;health&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;migrations_have_applied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Check if there are any migrations that haven&amp;#39;t been applied yet&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_DB_ALIAS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MigrationLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Count unapplied migrations&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_unapplied_migrations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrated_apps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaf_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plan_node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forwards_plan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plan_node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applied_migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;num_unapplied_migrations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_unapplied_migrations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our extended health check view function now looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;httplib&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httplib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERVICE_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrations_have_applied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httplib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SERVICE_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you have it: an effective health check view for Django applications.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 May 2016 00:00:00 +0100</pubDate>
        <link>http://tech.octopus.energy/news/2016/05/05/django-elb-health-checks.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/news/2016/05/05/django-elb-health-checks.html</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Organising styles for a React/Django hybrid</title>
        <description>&lt;p&gt;When we started working with React JS here at Octopus Energy, I thought I’d try
implementing &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS Modules&lt;/a&gt; to
achieve what they call ‘interoperable CSS’.&lt;/p&gt;

&lt;p&gt;It works especially well with React components, which are re-usable units of
mark-up and Javascript functionality. Using CSS modules allows a component’s
styles to be bundled with the component so they can be re-used through your
site.&lt;/p&gt;

&lt;p&gt;I used CSS modules as a PostCSS plugin and, with a few more plugins to handle
things like mixins, nesting, and variables, I was ready to go.&lt;/p&gt;

&lt;p&gt;Briefly, CSS Modules can be used with a React component as follows. Given a stylesheet for a component:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* component.css */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.className&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;you can reference it in your component JSX file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Component.jsx */&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./component.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and reference the styles in the JSX:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Component.jsx */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/h1&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Lorem&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipsum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dolor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sit&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;amet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, during compilation, the CSS modules will ensure each reference is unique:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.className__abc5436&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.className__def6547&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;className__abc5436&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello word&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;className__def6547&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;For a more detailed introduction to &lt;a href=&quot;http://glenmaddern.com/articles/css-modules&quot;&gt;CSS Modules: Welcome to the Future&lt;/a&gt; by Glen Maddern&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The benefits were pretty immediate. I had a &lt;code&gt;.css&lt;/code&gt; file to accompany every
component &lt;code&gt;.jsx&lt;/code&gt; file and I could use the sort of vague classnames you would
never dream of using in a regular CSS file. Suddenly &lt;code&gt;.Image&lt;/code&gt; was an
acceptable selector in the context, and one that wouldn’t result in me being
killed by another front end developer. The use of &lt;code&gt;@extend&lt;/code&gt; prevented code
duplication inside the component file, and allowed me to use styles from another
file if I was happy with reducing the level of encapsulation a little.&lt;/p&gt;

&lt;p&gt;However, encapsulation means just that; totally encapsulated.&lt;/p&gt;

&lt;h2 id=&quot;the-issue&quot;&gt;The issue&lt;/h2&gt;

&lt;p&gt;It’s important to note that the downside to CSS modules in this context is
entirely our own doing. There were instances where React either wasn’t the best
approach or wasn’t necessary for a particular section of the site. We have a lot
of skilled Python developers at Octopus Energy and so it’s always smart to
utilise that. Regardless of what is going on behind the scenes though, the front
end is always expected to be consistent. However, I was now in the position where
I had no way to access the randomly generated hash in the CSS selector that CSS
modules creates and use it in a Django template.&lt;/p&gt;

&lt;p&gt;Specifically, this part:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;__abc5436&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;of this class name:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.className__abc5436&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is dynamically injected before the page is rendered. I could try and guess the
hash but I may as well have bought a lottery ticket and expected the same
outcome - an unstyled component and no extra money.&lt;/p&gt;

&lt;h2 id=&quot;the-attempted-workaround&quot;&gt;The attempted workaround&lt;/h2&gt;

&lt;p&gt;So I had CSS siloed in modular component files and areas of the site that now
wanted to use those styles that weren’t React-based. In an attempt to prevent
excessive duplication between the two, I created a &lt;code&gt;Sitewide.css&lt;/code&gt; file that both
the CSS modules and the SASS (used for the rest of the site/global styles) could
extend from. The downside to this approach is two-fold:&lt;/p&gt;

&lt;p&gt;1) The styles in this file had to be written in pure CSS as SASS and PostCSS have different syntax for mixins and variables.&lt;/p&gt;

&lt;p&gt;2) As pure CSS, the bigger the file becomes the less maintainable it is without the use of pre-processor features such as variables, nesting, and mixins.&lt;/p&gt;

&lt;p&gt;Therefore, for future code quality, I had to remove CSS modules from the setup
and replace it with SASS globally. However its approach did teach me some good
techniques that I brought over to the custom approach we use now.&lt;/p&gt;

&lt;h2 id=&quot;the-new-approach&quot;&gt;The new approach&lt;/h2&gt;

&lt;p&gt;We use a version of the &lt;a href=&quot;http://sass-guidelin.es/#the-7-1-pattern&quot;&gt;7-1 pattern&lt;/a&gt;
to lay out our styles and directories (although ours is only 5-1). It looks like
this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;sass/
|
|- base/
|    |- _global.scss    # Global rules
|    |- _type.scss      # Typography rules
|
|
|- components/
|    |- # Pattern exactly mimics app/components
|    |- # with one .scss file for each component
|    |- common/
|    |- join-wizard/
|    |- quote-wizard/
|    |- style-guide/
|
|
|- layout/
|    |- _alerts.scss    # Alerts
|    |- _buttons.scss   # Buttons
|    |- _forms.scss     # Forms
|    |- _grid.scss      # Grid (Bootstrap + our styles)
|    |- _links.scss     # Links
|    |- _lists.scss     # Lists
|    |- _nav.scss       # Nav
|    |- _print.scss     # Print specific styles
|    |- _tables.scss    # Tables
|    |- _wells.scss     # Wells
|
|
|- pages/
|    |- # Styles for any page specific rules
|    |- # (One file per section)
|    |- _dashboard.scss
|
|
|- utils/
|    |- _mixins.scss    # Mixins
|    |- _variables.scss # Variables
|
|
|- styles.scss          # Main Sass file&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although all styles are technically ‘global’ now, we try and make each component as encapsulated as possible, enabling it to be used throughout the application with no visible changes in appearance.&lt;/p&gt;

&lt;p&gt;To achieve this, we have a set of rules when styling components new or existing. The rules are as follows:&lt;/p&gt;

&lt;h2 id=&quot;the-rules&quot;&gt;The rules&lt;/h2&gt;

&lt;h3 id=&quot;mimic-the-react-component-layout&quot;&gt;1. Mimic the React component layout&lt;/h3&gt;

&lt;p&gt;As you can see from the structure above, within &lt;code&gt;sass/&lt;/code&gt;, we have a &lt;code&gt;components/&lt;/code&gt; directory that mimics the layout of the React components folder in &lt;code&gt;app/components&lt;/code&gt;. Although this isn’t in the same directory as the JS, it still maintains CSS modules’ idea of style separation. The effect is you still always know where to find the styles specific to a React component; it has the same name!&lt;/p&gt;

&lt;h3 id=&quot;never-use-global-classes&quot;&gt;2. Never use global classes&lt;/h3&gt;

&lt;p&gt;Each selector in a component &lt;code&gt;.scss&lt;/code&gt; file will start with the name of the component followed by the class name. i.e. if we were creating a &lt;code&gt;button&lt;/code&gt; class in a container called &lt;code&gt;JoinComponent&lt;/code&gt;, the class selector in &lt;code&gt;_JoinComponent.scss&lt;/code&gt; would be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.JoinComponent-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This way, the button styles are exclusive to the &lt;code&gt;JoinComponent&lt;/code&gt; component, and would not be caught up in specificity issues or accidentally overridden in another file.&lt;/p&gt;

&lt;h3 id=&quot;only-extend-global-classes-for-a-reason&quot;&gt;3. Only &lt;code&gt;@extend&lt;/code&gt; global classes for a reason&lt;/h3&gt;

&lt;p&gt;If your component uses a common piece of styling, such as a button or link, you should use the original selector rather than extending it just to give it a new name that starts with the name of the component. So this is no good:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.JoinComponent-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only reasons to &lt;code&gt;@extend&lt;/code&gt; a selector in this way are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you wish to use the core styles but want to add some more on top. In this case extending is fine as it prevents code duplication.&lt;/li&gt;
  &lt;li&gt;If the name of the core selector would make no sense in the context of the component. The markup of a component should be easy to read and therefore the selectors should make sense alongside the markup. An example of this would be using the exact same styles as a &lt;code&gt;.button&lt;/code&gt; but it actually being an alert. In which case the following would be fine:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.JoinComponent-alert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;do-not-nest-classes&quot;&gt;4. Do not nest classes&lt;/h3&gt;

&lt;p&gt;This rule only applies to component-specific &lt;code&gt;.scss&lt;/code&gt; files. The reasoning behind this is that your layers of specificity remain low, as you avoid cases where classes only get certain styling when they are inside other classes etc. Therefore if you ever changed the hierarchy of the component markup, it would break the styling.&lt;/p&gt;

&lt;p&gt;You are allowed to style anything inside a class that is a regular HTML component (paragraph or anchor tags for example), but instead of nesting classes, simply create them as two separate selectors. The fact that each component selector starts with the component’s name also means that you can be vague in your selector names and not worry that the style will affect other areas of the app:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Instead of this: */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.well&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;.well-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Do this: */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Component-well&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Component-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://tech.octopus.energy/news/2016/03/23/organising-styles-for-a-react-django-hybrid.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/news/2016/03/23/organising-styles-for-a-react-django-hybrid.html</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Testing for missing migrations in Django</title>
        <description>&lt;p&gt;Since version 1.7, Django creates migrations for more than just changes to
your model fields. It’s easy to forget to create a migration after changing,
say, the &lt;code&gt;verbose_name_plural&lt;/code&gt; of a model class - I’ve done this many times.
This can lead to a mess down the line when multiple developers all end up
creating the same migration in separate branches.&lt;/p&gt;

&lt;p&gt;You can avoid this situation by checking for missing migrations in your test
suite:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.management&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_command&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_for_missing_migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;call_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;#39;makemigrations&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dry_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;SystemExit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# The exit code will be 1 when there are no missing migrations&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;There are missing migrations:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we call the &lt;code&gt;makemigrations&lt;/code&gt; command in “dry-run” mode and test the
exit code to determine if there are any missing migrations. If there are missing
migrations, the test will fail and print the captured output from the
&lt;code&gt;makemigrations&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Note that if you are using a custom &lt;code&gt;MIGRATION_MODULES&lt;/code&gt; setting to &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/settings/#migration-modules&quot;&gt;avoid
applying migrations during
tests&lt;/a&gt;, you need to restore its default value for
the above command to work:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.management&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_command&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override_settings&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@override_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIGRATION_MODULES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_for_missing_migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;call_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;#39;makemigrations&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dry_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;SystemExit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# The exit code will be 1 when there are no missing migrations&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;There are missing migrations:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Credit for this implementation belongs to Mozilla’s Ed Morley, who &lt;a href=&quot;https://github.com/mozilla/treeherder/commit/dd539147716125bb4d2798cdaf613e294c363fb2&quot;&gt;committed a
similar fix&lt;/a&gt;
for their &lt;a href=&quot;https://github.com/mozilla/treeherder/&quot;&gt;treeherder&lt;/a&gt; project. The above snippets are
slightly extended versions of his original.&lt;/p&gt;

&lt;p&gt;Related reading:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here’s &lt;a href=&quot;http://tech.yunojuno.com/keeping-on-top-of-django-migrations&quot;&gt;another approach&lt;/a&gt; by YunoJuno that achieves the same effect.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://tech.octopus.energy/news/2016/01/21/testing-for-missing-migrations-in-django.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/news/2016/01/21/testing-for-missing-migrations-in-django.html</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Hello world, would you like to join us?</title>
        <description>&lt;p&gt;We’re looking for super-smart people to join the tech team at Octopus Energy. We’re in the process of designing and building our initial infrastructure. There are many difficult design problems to solve; we need creative, analytical minds who can help tame this notoriously tricky domain.&lt;/p&gt;

&lt;p&gt;To start with, our main technologies will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AWS - using the excellent Hashicorp toolset (Vagrant, Packer, Consul and Terraform);&lt;/li&gt;
  &lt;li&gt;Python - especially Django and Django-REST-Framework. We’re also looking to employ Python’s data processing libraries such as numpy and pandas (although this is still up for debate);&lt;/li&gt;
  &lt;li&gt;Postgres and DynamoDB;&lt;/li&gt;
  &lt;li&gt;Memcached and Redis;&lt;/li&gt;
  &lt;li&gt;React and related modules from the Javascript ecosystem - our consumer-facing user interfaces are going to be super slick;&lt;/li&gt;
  &lt;li&gt;Node, npm, webpack, babel, gulp etc.;&lt;/li&gt;
  &lt;li&gt;Puppet - for config management.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our current priorities lie with server-side work so we’re keen to
speak to Pythonistas, developer data scientists or anyone with a love of automation and data processing.&lt;/p&gt;

&lt;p&gt;But we’re always interested in talking to smart, motivated people with an
interest in green tech - we’d love to hear from anyone with experience in the
above.&lt;/p&gt;

&lt;p&gt;Could this be you?&lt;/p&gt;

&lt;p&gt;We hope so. Ideally, you’ll have experience in one or more of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Strong Python, especially Django and building for the web;&lt;/li&gt;
  &lt;li&gt;Knowledge of data processing (eg luigi, pandas, numpy - doesn’t have
to be Python though);&lt;/li&gt;
  &lt;li&gt;Building slick user interfaces with React;&lt;/li&gt;
  &lt;li&gt;Knowledge of the modern Javascript ecosystem and asset build pipelines (eg
webpack, mocha, gulp);&lt;/li&gt;
  &lt;li&gt;Non-trivial experience with AWS;&lt;/li&gt;
  &lt;li&gt;Experience working with 3rd party APIs, eg XML webservices, REST APIs, FTP
filedrops, that kind of thing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a great opportunity to be an early employee at a revolutionary company. Working at Octopus Energy offers the unique combination of solving difficult technical problems with modern technology as well as working on something that will genuinely make the world a better place (that is, helping transition the UK to a lower carbon future).&lt;/p&gt;

&lt;p&gt;Lots of experience isn’t strictly necessary to join. We’re interested in graduates as well as developers with experience in the above technologies or the UK energy market.&lt;/p&gt;

&lt;p&gt;If this sounds interesting, tell us about yourself via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#116;&amp;#097;&amp;#108;&amp;#101;&amp;#110;&amp;#116;&amp;#064;&amp;#111;&amp;#099;&amp;#116;&amp;#111;&amp;#101;&amp;#110;&amp;#101;&amp;#114;&amp;#103;&amp;#121;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#116;&amp;#097;&amp;#108;&amp;#101;&amp;#110;&amp;#116;&amp;#064;&amp;#111;&amp;#099;&amp;#116;&amp;#111;&amp;#101;&amp;#110;&amp;#101;&amp;#114;&amp;#103;&amp;#121;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PS - Right now, we’re not considering 100% remote candidates. At this early
stage, there’s enormous value in high-bandwidth person-to-person communication
that you can only get by working in the same space. This may change later on of
course.&lt;/p&gt;

</description>
        <pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate>
        <link>http://tech.octopus.energy/news/2015/11/23/tech-jobs.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/news/2015/11/23/tech-jobs.html</guid>
        
        
        <category>news</category>
        
      </item>
    
  </channel>
</rss>
